{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Desktop/chess-game/src/Components/Game/Chessboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from './Tile'; //import the tile component to push to board\n\nimport { pieces } from \"./PieceData\";\nimport '../Style/Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const chessboardRef = useRef(null);\n  let active = null;\n  let chessboard = null;\n  let element = null;\n  const [piece, setPiece] = useState(pieces);\n  const [grabX, setGrabX] = useState(0);\n  const [grabY, setGrabY] = useState(0);\n\n  const grabPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef;\n\n    if (element.classList.contains(\"piece\") && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clinetY - 50;\n      setGrabX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGrabY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      element.style.position = \"absolute\";\n      element.style.top = `${y}px`;\n      element.style.left = `${x}px`;\n    }\n  };\n\n  const movePiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n\n    if (chessboard && element.classList.contains(\"piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 40;\n      const minY = chessboard.offsetTop - 40;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      console.log(minX);\n\n      if (x < minX) {\n        element.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        element.style.left = `${maxX}px`;\n      } else {\n        element.style.left = `${x}px`;\n      }\n\n      element.style.top = `${y}px`;\n    }\n  };\n\n  const dropPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n\n    if (element.classList.contains(\"piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setPiece(value => {\n        const piece = value.map(p => {\n          if (p.x === grabX && p.y === grabY) {\n            p.x = dropX;\n            p.y = dropY;\n          }\n\n          return p;\n        });\n        return piece;\n      });\n      element.style.position = \"relative\";\n      element.style.removeProperty(\"top\");\n      element.style.removeProperty(\"left\");\n    }\n  }; //initilize the chessboard array\n\n\n  let board = []; //height and width of the board\n\n  let HEIGHT = 8;\n  let WIDTH = 8;\n\n  for (var i = HEIGHT - 1; i >= 0; --i) {\n    for (var j = 0; j < WIDTH; j++) {\n      let imageData = null;\n      let number = i + j + 2;\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          imageData = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: imageData,\n        position: number\n      }, `${j}, ${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    ref: chessboardRef,\n    onMouseDown: grabPiece,\n    onMouseMove: movePiece,\n    onMouseUp: dropPiece,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chessboard, \"dVlxjCOe/6d5r1DAQLcDBkuW+hA=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/carlos/Desktop/chess-game/src/Components/Game/Chessboard.js"],"names":["React","useRef","useState","Tile","pieces","Chessboard","chessboardRef","active","chessboard","element","piece","setPiece","grabX","setGrabX","grabY","setGrabY","grabPiece","e","MouseEvent","target","classList","contains","x","clientX","y","clinetY","Math","floor","offsetLeft","abs","ceil","clientY","offsetTop","style","position","top","left","movePiece","minX","minY","maxX","clientWidth","console","log","dropPiece","dropX","dropY","value","map","p","removeProperty","board","HEIGHT","WIDTH","i","j","imageData","number","forEach","image","push"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport Tile from './Tile'; //import the tile component to push to board\nimport {pieces} from \"./PieceData\";\nimport '../Style/Chessboard.css';\nexport default function Chessboard ()\n{\n\n    const chessboardRef = useRef(null);\n    let active = null; let chessboard = null; let element = null;\n    const [piece, setPiece] = useState(pieces);\n    const [grabX, setGrabX] = useState(0);\n    const [grabY, setGrabY] = useState(0);\n    \n    const grabPiece = (e = React.MouseEvent ) => {\n        element = e.target;\n        chessboard = chessboardRef;\n        if(element.classList.contains(\"piece\") && chessboard)\n        {\n            const x = e.clientX - 50;\n            const y = e.clinetY - 50;\n            setGrabX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n            setGrabY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n            element.style.position = \"absolute\";\n            element.style.top = `${y}px`;\n            element.style.left = `${x}px`;\n            \n        }\n    }\n    const movePiece = (e = React.MouseEvent) => {\n        \n        if(chessboard && element.classList.contains(\"piece\"))\n        {\n            const x = e.clientX - 50;\n            const y = e.clientY - 50;\n            const minX = chessboard.offsetLeft - 40;\n            const minY = chessboard.offsetTop - 40;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n            console.log(minX);\n\n            if(x < minX){element.style.left = `${minX}px`}\n            else if( x > maxX){element.style.left = `${maxX}px`;}\n            else{element.style.left = `${x}px`;}\n            \n\n            \n            element.style.top = `${y}px`;\n            \n           \n        }\n        \n    }\n    const dropPiece = (e = React.MouseEvent) => {\n        \n            \n            if(element.classList.contains(\"piece\"))\n            {\n                const x = e.clientX - 50;\n                const y = e.clientY - 50;\n                const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n                const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n                setPiece(value => {\n                    const piece = value.map(p => {\n                        if(p.x === grabX && p.y === grabY)\n                        {\n                            p.x = dropX;\n                            p.y = dropY;\n                        }\n                        \n                        return p;\n                    })\n                    return piece;\n                })\n                element.style.position = \"relative\";\n                element.style.removeProperty(\"top\");\n                element.style.removeProperty(\"left\");\n\n                \n                \n            }\n            \n            \n        \n    }\n\n    //initilize the chessboard array\n    let board = [];\n    //height and width of the board\n    let HEIGHT = 8; let WIDTH = 8;\n\n    for(var i = HEIGHT - 1 ; i >= 0; --i)\n    {\n        for(var j = 0; j < WIDTH; j++)\n        {\n            let imageData = null;\n            let number = i + j + 2;\n            pieces.forEach(p => {\n                if(p.x === j && p.y === i)\n                {\n                    imageData = p.image;\n                }\n            });\n            board.push(<Tile key = {`${j}, ${i}`} image = {imageData} position = {number}/>)\n        }\n    }\n\n    return(\n        <div \n        id = \"chessboard\"\n        ref = {chessboardRef}\n        onMouseDown = {grabPiece}\n        onMouseMove = {movePiece}\n        onMouseUp = {dropPiece}\n            >\n            {board}\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}