{"ast":null,"code":"var _jsxFileName = \"/Users/carlosalmagro/Desktop/react-chess-game/src/Components/Game/Chessboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from './Tile'; //import the tile component to push to board\n\nimport { pieces } from \"./PieceData\";\nimport { rule } from \"./Rules/Rule\";\nimport '../Style/Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const chessboardRef = useRef(null);\n  let chessboard = null;\n  let element = null;\n  let white_player = true;\n  const [piece, setPiece] = useState(pieces);\n  const [color, setColor] = useState(\"\");\n  const [grabX, setGrabX] = useState(0);\n  const [grabY, setGrabY] = useState(0);\n\n  const grabPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"piece\") && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clinetY - 50;\n      setGrabX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGrabY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      element.style.position = \"absolute\";\n      element.style.top = `${y}px`;\n      element.style.left = `${x}px`;\n    }\n  };\n\n  const movePiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef.current;\n\n    if (chessboard && element.classList.contains(\"piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 40;\n      const minY = chessboard.offsetTop - 40;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n\n      if (x < minX) {\n        element.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        element.style.left = `${maxX}px`;\n      } else {\n        element.style.left = `${x}px`;\n      }\n\n      element.style.top = `${y}px`;\n    }\n  };\n\n  const dropPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setColor(color = \"white\");\n      setPiece(value => {\n        const piece = value.map(p => {\n          if (p.x === grabX && p.y === grabY && p.color === color) {\n            console.log(clr);\n            console.log(p.piece);\n            var s = rule(p.piece, p.y, dropY, p.x, dropX, p.color);\n\n            if (s) {\n              p.x = dropX;\n              p.y = dropY;\n              setColor(color = \"black\");\n            }\n          }\n\n          return p;\n        });\n        return piece;\n      });\n      element.style.position = \"static\";\n      element.style.removeProperty(\"top\");\n      element.style.removeProperty(\"left\");\n    }\n  }; //initilize the chessboard array\n\n\n  let board = []; //height and width of the board\n\n  let HEIGHT = 8;\n  let WIDTH = 8;\n\n  for (var i = HEIGHT - 1; i >= 0; --i) {\n    for (var j = 0; j < WIDTH; j++) {\n      let imageData = null;\n      let number = i + j + 2;\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          imageData = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: imageData,\n        position: number\n      }, `${j}, ${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    ref: chessboardRef,\n    onMouseDown: grabPiece,\n    onMouseMove: movePiece,\n    onMouseUp: dropPiece,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chessboard, \"rc/JNlcR1G11PFcc3sv6FPU4x3M=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/Users/carlosalmagro/Desktop/react-chess-game/src/Components/Game/Chessboard.js"],"names":["React","useRef","useState","Tile","pieces","rule","Chessboard","chessboardRef","chessboard","element","white_player","piece","setPiece","color","setColor","grabX","setGrabX","grabY","setGrabY","grabPiece","e","MouseEvent","target","current","classList","contains","x","clientX","y","clinetY","Math","floor","offsetLeft","abs","ceil","clientY","offsetTop","style","position","top","left","movePiece","minX","minY","maxX","clientWidth","dropPiece","dropX","dropY","value","map","p","console","log","clr","s","removeProperty","board","HEIGHT","WIDTH","i","j","imageData","number","forEach","image","push"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport Tile from './Tile'; //import the tile component to push to board\nimport {pieces} from \"./PieceData\";\nimport {rule} from \"./Rules/Rule\";\nimport '../Style/Chessboard.css';\nexport default function Chessboard ()\n{\n\n    const chessboardRef = useRef(null);  \nlet chessboard = null; let element = null;let white_player = true;\n    const [piece, setPiece] = useState(pieces);\n    const [color, setColor] = useState(\"\");\n    const [grabX, setGrabX] = useState(0);\n    const [grabY, setGrabY] = useState(0);\n    \n    const grabPiece = (e = React.MouseEvent ) => {\n        element = e.target;\n        chessboard = chessboardRef.current;\n        if(element.classList.contains(\"piece\") && chessboard)\n        {\n            const x = e.clientX - 50;\n            const y = e.clinetY - 50;\n            setGrabX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n            setGrabY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n            \n            element.style.position = \"absolute\";\n            element.style.top = `${y}px`;\n            element.style.left = `${x}px`;\n            \n        }\n    }\n    const movePiece = (e = React.MouseEvent) => {\n        element = e.target;chessboard = chessboardRef.current;\n        if(chessboard && element.classList.contains(\"piece\"))\n        {\n            const x = e.clientX - 50;\n            const y = e.clientY - 50;\n            const minX = chessboard.offsetLeft - 40;\n            const minY = chessboard.offsetTop - 40;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n            \n            if(x < minX){element.style.left = `${minX}px`}\n            else if( x > maxX){element.style.left = `${maxX}px`;}\n            else{element.style.left = `${x}px`;}\n            \n\n            \n            element.style.top = `${y}px`;\n            \n           \n        }\n        \n    }\n    const dropPiece = (e = React.MouseEvent) => {\n        \n            element = e.target;chessboard = chessboardRef.current;\n            if(element.classList.contains(\"piece\"))\n            {\n                \n                const x = e.clientX - 50;\n                const y = e.clientY - 50;\n                const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n                const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n                setColor(color = \"white\");\n                setPiece(value => {\n                    const piece = value.map(p => {\n                        \n                        \n                        if((p.x === grabX && p.y === grabY) && p.color === color)\n                        {\n                            console.log(clr);\n                            console.log(p.piece);\n                            var s = rule(p.piece, p.y, dropY, p.x, dropX, p.color);\n                            if(s )\n                            {\n                                p.x = dropX;\n                                p.y = dropY; \n                                setColor(color = \"black\");\n                            }\n                            \n                                                       \n                        }\n                        return p;\n                    \n                        \n                    });\n                    return piece;\n                    \n                    \n                })\n                element.style.position = \"static\";\n                element.style.removeProperty(\"top\");\n                element.style.removeProperty(\"left\");\n                \n                \n                \n            }\n            \n            \n        \n    }\n\n    //initilize the chessboard array\n    let board = [];\n    //height and width of the board\n    let HEIGHT = 8; let WIDTH = 8;\n\n    for(var i = HEIGHT - 1 ; i >= 0; --i)\n    {\n        for(var j = 0; j < WIDTH; j++)\n        {\n            let imageData = null;\n            let number = i + j + 2;\n            pieces.forEach(p => {\n                if(p.x === j && p.y === i)\n                {\n                    imageData = p.image;\n                }\n            });\n            board.push(<Tile key = {`${j}, ${i}`} image = {imageData} position = {number}/>)\n        }\n    }\n\n    return(\n        <div \n        id = \"chessboard\"\n        ref = {chessboardRef}\n        onMouseDown = {grabPiece}\n        onMouseMove = {movePiece}\n        onMouseUp = {dropPiece}\n            >\n            {board}\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}