{"ast":null,"code":"var _jsxFileName = \"/home/carlos/Desktop/chess-game/src/Components/Game/Chessboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from './Tile'; //import the tile component to push to board\n\nimport { pieces } from \"./PieceData\";\nimport { grabPiece } from './Functions/Movement';\nimport '../Style/Chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const element = null;\n  const chessboardRef = useRef(null);\n  let active = null;\n  let chessboard = null;\n  const [piece, setPiece] = useState(pieces);\n  const [grabX, setGrabX] = useState(0);\n  const [grabY, setGrabY] = useState(0);\n  grabPiece(e = React.MouseEvent, element, chessboard, setGrabX, setGrabY);\n\n  const movePiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n\n    if (chessboard && active) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 40;\n      const minY = chessboard.offsetTop - 40;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      console.log(minX);\n\n      if (x < minX) {\n        active.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        active.style.left = `${maxX}px`;\n      } else {\n        active.style.left = `${x}px`;\n      }\n\n      active.style.top = `${y}px`;\n    }\n  };\n\n  const dropPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    chessboard = chessboardRef.current;\n\n    if (active) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setPiece(value => {\n        const piece = value.map(p => {\n          if (p.x === grabX && p.y === grabY) {\n            p.x = dropX;\n            p.y = dropY;\n          }\n\n          return p;\n        });\n        return piece;\n      });\n      active.style.position = \"relative\";\n      active.style.removeProperty(\"top\");\n      active.style.removeProperty(\"left\");\n    }\n  }; //initilize the chessboard array\n\n\n  let board = []; //height and width of the board\n\n  let HEIGHT = 8;\n  let WIDTH = 8;\n\n  for (var i = HEIGHT - 1; i >= 0; --i) {\n    for (var j = 0; j < WIDTH; j++) {\n      let imageData = null;\n      let number = i + j + 2;\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          imageData = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: imageData,\n        position: number\n      }, `${j}, ${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    ref: chessboardRef,\n    onMouseDown: grabPiece,\n    onMouseMove: movePiece,\n    onMouseUp: dropPiece,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chessboard, \"dVlxjCOe/6d5r1DAQLcDBkuW+hA=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/carlos/Desktop/chess-game/src/Components/Game/Chessboard.js"],"names":["React","useRef","useState","Tile","pieces","grabPiece","Chessboard","element","chessboardRef","active","chessboard","piece","setPiece","grabX","setGrabX","grabY","setGrabY","e","MouseEvent","movePiece","x","clientX","y","clientY","minX","offsetLeft","minY","offsetTop","maxX","clientWidth","console","log","style","left","top","dropPiece","current","dropX","Math","floor","dropY","abs","ceil","value","map","p","position","removeProperty","board","HEIGHT","WIDTH","i","j","imageData","number","forEach","image","push"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\nimport Tile from './Tile'; //import the tile component to push to board\nimport {pieces} from \"./PieceData\";\nimport {grabPiece} from './Functions/Movement';\nimport '../Style/Chessboard.css';\nexport default function Chessboard ()\n{\n    \n    const element = null;\n    const chessboardRef = useRef(null);\n    let active = null; let chessboard = null;\n    const [piece, setPiece] = useState(pieces);\n    const [grabX, setGrabX] = useState(0);\n    const [grabY, setGrabY] = useState(0);\n    \n    grabPiece( e = React.MouseEvent, element, chessboard, setGrabX, setGrabY)\n    const movePiece = (e = React.MouseEvent) => {\n        \n        if(chessboard && active)\n        {\n            const x = e.clientX - 50;\n            const y = e.clientY - 50;\n            const minX = chessboard.offsetLeft - 40;\n            const minY = chessboard.offsetTop - 40;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n            console.log(minX);\n\n            if(x < minX){active.style.left = `${minX}px`}\n            else if( x > maxX){active.style.left = `${maxX}px`;}\n            else{active.style.left = `${x}px`;}\n            \n\n            \n            active.style.top = `${y}px`;\n            \n           \n        }\n        \n    }\n    const dropPiece = (e = React.MouseEvent) => {\n        \n            chessboard = chessboardRef.current;\n            if(active)\n            {\n                const x = e.clientX - 50;\n                const y = e.clientY - 50;\n                const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n                const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n                setPiece(value => {\n                    const piece = value.map(p => {\n                        if(p.x === grabX && p.y === grabY)\n                        {\n                            p.x = dropX;\n                            p.y = dropY;\n                        }\n                        \n                        return p;\n                    })\n                    return piece;\n                })\n                active.style.position = \"relative\";\n                active.style.removeProperty(\"top\");\n                active.style.removeProperty(\"left\");\n                \n                \n            }\n            \n            \n        \n    }\n\n    //initilize the chessboard array\n    let board = [];\n    //height and width of the board\n    let HEIGHT = 8; let WIDTH = 8;\n\n    for(var i = HEIGHT - 1 ; i >= 0; --i)\n    {\n        for(var j = 0; j < WIDTH; j++)\n        {\n            let imageData = null;\n            let number = i + j + 2;\n            pieces.forEach(p => {\n                if(p.x === j && p.y === i)\n                {\n                    imageData = p.image;\n                }\n            });\n            board.push(<Tile key = {`${j}, ${i}`} image = {imageData} position = {number}/>)\n        }\n    }\n\n    return(\n        <div \n        id = \"chessboard\"\n        ref = {chessboardRef}\n        onMouseDown = {grabPiece}\n        onMouseMove = {movePiece}\n        onMouseUp = {dropPiece}\n            >\n            {board}\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}