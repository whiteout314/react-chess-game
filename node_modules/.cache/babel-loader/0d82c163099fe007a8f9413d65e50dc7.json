{"ast":null,"code":"var _jsxFileName = \"/Users/carlosalmagro/Desktop/react-chess-game/src/Components/Game/Chessboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport Tile from \"./Tile\"; //import the tile component to push to board\n\nimport { pieces } from \"./PieceData\";\nimport { rule } from \"./Rules/Rule\";\nimport \"../Style/Chessboard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const chessboardRef = useRef(null);\n  let chessboard = null;\n  let element = null;\n  let white_player = true;\n  const [piece, setPiece] = useState(pieces);\n  const [color, setColor] = useState(\"white\");\n  const [grabX, setGrabX] = useState(0);\n  const [grabY, setGrabY] = useState(0);\n\n  const grabPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"piece\") && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clinetY - 50;\n      setGrabX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGrabY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      element.style.position = \"absolute\";\n      element.style.top = `${y}px`;\n      element.style.left = `${x}px`;\n    }\n  };\n\n  const movePiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef.current;\n\n    if (chessboard && element.classList.contains(\"piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 40;\n      const minY = chessboard.offsetTop - 40;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n\n      if (x < minX) {\n        element.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        element.style.left = `${maxX}px`;\n      } else {\n        element.style.left = `${x}px`;\n      }\n\n      element.style.top = `${y}px`;\n    }\n  };\n\n  const dropPiece = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : React.MouseEvent;\n    element = e.target;\n    chessboard = chessboardRef.current;\n\n    if (element.classList.contains(\"piece\")) {\n      let dropped = false;\n      let prev_x = null;\n      let prev_y = null;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const dropY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      setPiece(value => {\n        const piece = value.map(p => {\n          prev_x = p.x;\n          prev_y = p.y;\n\n          if (p.x === grabX && p.y === grabY && p.color === color) {\n            console.log(p.piece);\n            var s = rule(p.piece, p.y, dropY, p.x, dropX, p.color);\n            color === \"white\" ? setColor(\"black\") : setColor(\"white\");\n            console.log(color);\n\n            if (s) {\n              p.x = dropX;\n              p.y = dropY;\n            }\n          }\n\n          return p;\n        });\n        return piece;\n      });\n      element.style.position = \"static\";\n      element.style.removeProperty(\"top\");\n      element.style.removeProperty(\"left\");\n    }\n  }; //initilize the chessboard array\n\n\n  let board = []; //height and width of the board\n\n  let HEIGHT = 8;\n  let WIDTH = 8;\n\n  for (var i = HEIGHT - 1; i >= 0; --i) {\n    for (var j = 0; j < WIDTH; j++) {\n      let imageData = null;\n      let number = i + j + 2;\n      pieces.forEach(p => {\n        if (p.x === j && p.y === i) {\n          imageData = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: imageData,\n        position: number\n      }, `${j}, ${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chessboard\",\n    ref: chessboardRef,\n    onMouseDown: grabPiece,\n    onMouseMove: movePiece,\n    onMouseUp: dropPiece,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chessboard, \"9ekIASWspaIx1bjf+SpEgEqLQ9E=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/Users/carlosalmagro/Desktop/react-chess-game/src/Components/Game/Chessboard.js"],"names":["React","useRef","useState","Tile","pieces","rule","Chessboard","chessboardRef","chessboard","element","white_player","piece","setPiece","color","setColor","grabX","setGrabX","grabY","setGrabY","grabPiece","e","MouseEvent","target","current","classList","contains","x","clientX","y","clinetY","Math","floor","offsetLeft","abs","ceil","clientY","offsetTop","style","position","top","left","movePiece","minX","minY","maxX","clientWidth","dropPiece","dropped","prev_x","prev_y","dropX","dropY","value","map","p","console","log","s","removeProperty","board","HEIGHT","WIDTH","i","j","imageData","number","forEach","image","push"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Tile from \"./Tile\"; //import the tile component to push to board\nimport { pieces } from \"./PieceData\";\nimport { rule } from \"./Rules/Rule\";\nimport \"../Style/Chessboard.css\";\nexport default function Chessboard() {\n  const chessboardRef = useRef(null);\n  let chessboard = null;\n  let element = null;\n  let white_player = true;\n  const [piece, setPiece] = useState(pieces);\n  const [color, setColor] = useState(\"white\");\n  const [grabX, setGrabX] = useState(0);\n  const [grabY, setGrabY] = useState(0);\n\n  const grabPiece = (e = React.MouseEvent) => {\n    element = e.target;\n    chessboard = chessboardRef.current;\n    if (element.classList.contains(\"piece\") && chessboard) {\n      const x = e.clientX - 50;\n      const y = e.clinetY - 50;\n      setGrabX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGrabY(\n        Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100))\n      );\n\n      element.style.position = \"absolute\";\n      element.style.top = `${y}px`;\n      element.style.left = `${x}px`;\n    }\n  };\n  const movePiece = (e = React.MouseEvent) => {\n    element = e.target;\n    chessboard = chessboardRef.current;\n    if (chessboard && element.classList.contains(\"piece\")) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const minX = chessboard.offsetLeft - 40;\n      const minY = chessboard.offsetTop - 40;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n\n      if (x < minX) {\n        element.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        element.style.left = `${maxX}px`;\n      } else {\n        element.style.left = `${x}px`;\n      }\n\n      element.style.top = `${y}px`;\n    }\n  };\n  const dropPiece = (e = React.MouseEvent) => {\n    element = e.target;\n    chessboard = chessboardRef.current;\n    if (element.classList.contains(\"piece\")) {\n      let dropped = false;\n      let prev_x = null; let prev_y = null;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      const dropX = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const dropY = Math.abs(\n        Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)\n      );\n      \n        setPiece((value) => {\n          const piece = value.map((p) => {\n              prev_x = p.x;\n              prev_y = p.y;\n            if (p.x === grabX && p.y === grabY && p.color === color) {\n              console.log(p.piece);\n              var s = rule(p.piece, p.y, dropY, p.x, dropX, p.color);\n              \n              color === \"white\" ? setColor(\"black\") : setColor(\"white\");\n              console.log(color);\n              if (s) {\n                p.x = dropX;\n                p.y = dropY;\n              }\n              \n            }\n            \n            return p;\n          });\n          \n          return piece;\n\n        });\n        \n        \n      \n\n      element.style.position = \"static\";\n      element.style.removeProperty(\"top\");\n      element.style.removeProperty(\"left\");\n    }\n  };\n\n  //initilize the chessboard array\n  let board = [];\n  //height and width of the board\n  let HEIGHT = 8;\n  let WIDTH = 8;\n\n  for (var i = HEIGHT - 1; i >= 0; --i) {\n    for (var j = 0; j < WIDTH; j++) {\n      let imageData = null;\n      let number = i + j + 2;\n      pieces.forEach((p) => {\n        if (p.x === j && p.y === i) {\n          imageData = p.image;\n        }\n      });\n      board.push(\n        <Tile key={`${j}, ${i}`} image={imageData} position={number} />\n      );\n    }\n  }\n\n  return (\n    <div\n      id=\"chessboard\"\n      ref={chessboardRef}\n      onMouseDown={grabPiece}\n      onMouseMove={movePiece}\n      onMouseUp={dropPiece}\n    >\n      {board}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}